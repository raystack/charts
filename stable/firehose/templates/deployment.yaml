apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "firehose.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- range $key, $value := .Values.labels }}
    {{ $key }}: {{ $value }}
    {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "firehose.fullname" . }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-firehose.yaml") . | sha256sum }}
        sidecar.istio.io/inject: "{{ .Values.istio.sidecarInject }}"
      labels:
        app: {{ include "firehose.fullname" . }}
        {{- range $key, $value := .Values.labels }}
        {{ $key }}: {{ $value }}
        {{- end }}
    spec:
      containers:
      - args:
        {{- range .Values.firehose.args }}
        - {{ . }}
        {{- end }}
        name: {{ .Chart.Name }}
        image: "{{ .Values.firehose.image.repository }}:{{ .Values.firehose.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.firehose.image.pullPolicy }}
        {{- if or (index .Values "init-firehose" "enabled") (gt (len .Values.mountSecrets) 0 ) }}
        volumeMounts:
        {{- if index .Values "init-firehose" "enabled" }}
        - mountPath: /work-dir
          name: workdir
        {{- end }}
        {{- if (gt (len .Values.mountSecrets) 0 ) }}
        - mountPath: /etc/secret
          name: {{ include "firehose.fullname" . }}-mount
        {{- end }}
        {{- end }}
        resources:
          {{- toYaml .Values.firehose.resources | nindent 12 }}
        envFrom:
          - configMapRef:
              name: {{ include "firehose.fullname" . }}
          - secretRef:
              name: {{ include "firehose.fullname" . }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      {{- if index .Values.telegraf.enabled }}
      - name: telegrafd
        image: "{{ .Values.telegraf.image.repository }}:{{ .Values.telegraf.image.tag }}"
        imagePullPolicy: {{ .Values.telegraf.image.pullPolicy }}
        resources:
          {{- toYaml .Values.telegraf.resources | nindent 12 }}
        volumeMounts:
        - mountPath: /etc/telegraf
          name: telegraf-conf
      {{- end }}
      {{- if index .Values "init-firehose" "enabled" }}
      initContainers:
      - args:
        {{- range index .Values "init-firehose" "args" }}
        - {{ . }}
        {{- end }}
        command:
        {{- range index .Values "init-firehose" "command" }}
        - {{ . }}
        {{- end }}
        image: "{{ index .Values "init-firehose" "image" "repository" }}:{{ index .Values "init-firehose" "image" "tag" }}"
        imagePullPolicy: {{ index .Values "init-firehose" "image" "pullPolicy" }}
        name: init-firehose
        volumeMounts:
        - mountPath: /work-dir
          name: workdir
      {{- end }}
      {{if or (index .Values.telegraf.enabled) (index .Values "init-firehose" "enabled") (gt (len .Values.mountSecrets) 0 ) }}
      volumes:
      {{- if index .Values.telegraf.enabled }}
      - configMap:
          name: {{ include "firehose.fullname" . }}-telegraf
        name: telegraf-conf
      {{- end }}
      {{- if index .Values "init-firehose" "enabled" }}
      - emptyDir: {}
        name: workdir
      {{- end }}
      {{- if (gt (len .Values.mountSecrets) 0 ) }}
      - name: {{ include "firehose.fullname" . }}-mount
        secret:
          secretName: {{ include "firehose.fullname" . }}-mount
          defaultMode:  420
          items:
          {{- range $_, $mountSecret := .Values.mountSecrets}}
            - key: {{$mountSecret.key}}
              path: {{$mountSecret.path}}
          {{- end}}
      {{- end}}
      {{- end}}

      {{- if (gt (len .Values.tolerations) 0) }}
      tolerations: {{- range $_, $toleration := .Values.tolerations }}
        - key: {{ $toleration.key }}
          operator: {{ $toleration.operator }}
          value: "{{ $toleration.value }}"
          effect: {{ $toleration.effect }}
        {{- end }}
      {{- end}}
      {{- if or (gt (len .Values.nodeAffinityMatchExpressions.requiredDuringSchedulingIgnoredDuringExecution) 0) (gt (len .Values.nodeAffinityMatchExpressions.preferredDuringSchedulingIgnoredDuringExecution) 0) }}
      affinity:
        nodeAffinity:
          {{- if (gt (len .Values.nodeAffinityMatchExpressions.requiredDuringSchedulingIgnoredDuringExecution) 0) }}
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions: {{- range $_, $expression := .Values.nodeAffinityMatchExpressions.requiredDuringSchedulingIgnoredDuringExecution }}
                  - key: {{ $expression.key }}
                    operator: {{ $expression.operator }}
                    values: {{- range $expression.values }}
                      - "{{ . }}"
                    {{- end}}
              {{- end}}
          {{- end}}
          {{- if (gt (len .Values.nodeAffinityMatchExpressions.preferredDuringSchedulingIgnoredDuringExecution) 0) }}
          preferredDuringSchedulingIgnoredDuringExecution: {{- range $_, $expression := .Values.nodeAffinityMatchExpressions.preferredDuringSchedulingIgnoredDuringExecution }}
            - weight: {{ $expression.weight}}   
              preference:   
                matchExpressions: {{- range $_, $pref := $expression.preference }}   
                  - key: {{ $pref.key }}
                    operator: {{ $pref.operator }}
                    values: {{- range $pref.values }}
                      - {{ . }}
                    {{- end}}
                {{- end}}
          {{- end}}
          {{- end}}
      {{- end}}